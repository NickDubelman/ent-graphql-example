interface Node {
  id: ID!
}

"""Maps a Time GraphQL scalar to a Go time.Time struct."""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

"""
Define an enumeration type and map it later to Ent enum (Go type).
https://graphql.org/learn/schema/#enumeration-types
"""
enum Status {
  IN_PROGRESS
  COMPLETED
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type TodoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TodoEdge]
}

type TodoEdge {
  node: Todo
  cursor: Cursor!
}

"""The following enums are matched the entgql annotations in the ent/schema."""
enum TodoOrderField {
  CREATED_AT
  PRIORITY
  STATUS
  TEXT
}

enum OrderDirection {
  ASC
  DESC
}

input TodoOrder {
  direction: OrderDirection!
  field: TodoOrderField
}

"""
Define an object type and map it later to the generated Ent model.
https://graphql.org/learn/schema/#object-types-and-fields
"""
type Todo implements Node {
  id: ID!
  createdAt: Time
  status: Status!
  priority: Int!
  text: String!
  parent: Todo
  children: [Todo!]
}

"""
Define an input type for the mutation below.
https://graphql.org/learn/schema/#input-types

Note that, this type is mapped to the generated
input type in mutation_input.go.
"""
input CreateTodoInput {
  status: Status! = IN_PROGRESS
  priority: Int
  text: String
  parent: ID
  children: [ID!]
}

"""
Define an input type for the mutation below.
https://graphql.org/learn/schema/#input-types

Note that, this type is mapped to the generated
input type in mutation_input.go.
"""
input UpdateTodoInput {
  status: Status
  priority: Int
  text: String
  parent: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
}

"""
Define a mutation for creating todos.
https://graphql.org/learn/queries/#mutations
"""
type Mutation {
  createTodo(input: CreateTodoInput!): Todo!
  updateTodo(id: ID!, input: UpdateTodoInput!): Todo!
  updateTodos(ids: [ID!]!, input: UpdateTodoInput!): [Todo!]!
}

"""Define a query for getting all todos and support the Node interface."""
type Query {
  todos(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TodoOrder, where: TodoWhereInput): TodoConnection
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  
  """text field predicates"""
  text: String
  text_neq: String
  text_in: [String!]
  text_not_in: [String!]
  text_gt: String
  text_gte: String
  text_lt: String
  text_lte: String
  text_contains: String
  text_has_prefix: String
  text_has_suffix: String
  text_equal_fold: String
  text_contains_fold: String
  
  """created_at field predicates"""
  created_at: Time
  created_at_neq: Time
  created_at_in: [Time!]
  created_at_not_in: [Time!]
  created_at_gt: Time
  created_at_gte: Time
  created_at_lt: Time
  created_at_lte: Time
  
  """status field predicates"""
  status: Status
  status_neq: Status
  status_in: [Status!]
  status_not_in: [Status!]
  
  """priority field predicates"""
  priority: Int
  priority_neq: Int
  priority_in: [Int!]
  priority_not_in: [Int!]
  priority_gt: Int
  priority_gte: Int
  priority_lt: Int
  priority_lte: Int
  
  """children edge predicates"""
  has_children: Boolean
  has_children_with: [TodoWhereInput!]
  
  """parent edge predicates"""
  has_parent: Boolean
  has_parent_with: [TodoWhereInput!]
}
